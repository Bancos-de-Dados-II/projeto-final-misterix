@using frontend.Models
@inject IJSRuntime _jS
@inject NavigationManager _navigator
@rendermode InteractiveServer
@page "/"

<div id="container">
    <Map CanSetMarkers="false" @ref="_map" />
    <div id="sidebar">
        <div id="searchbar">
            <input type="text" name="search-input" @bind-value="searchInput">
            <button id="search-btn" onclick="Search">Pesquisar</button>
        </div>
        <div id="legends">
            <Virtualize Items="_legends" Context="legend">
                <div class="legend-item">
                    <Card Color="CardColor.Dark">
                        <CardBody>
                            <CardTitle>@legend.Title</CardTitle>
                            <CardSubTitle>@legend.Type</CardSubTitle>
                            <CardText>@legend.Description</CardText>
                        </CardBody>
                    </Card>
                </div>
            </Virtualize>
        </div>
    </div>
</div>

@code {
    private Map _map = null!;
    private List<Legend> _legends = [];
    private string searchInput = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var isSuccess = await _jS.InvokeAsync<bool>("checkAuth");
            if (!isSuccess)
                _navigator.NavigateTo("login");

            await _map.SetCurrentLocation();
        }

    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _legends = await _jS.InvokeAsync<List<Legend>>("getLegends");
        }
        catch
        {
            return;
        }
    }

    private async Task Search()
    {

    }
}