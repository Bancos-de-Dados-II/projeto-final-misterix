@using frontend.Models
@page "/mylegends"
@inject IJSRuntime _jS
@inject NavigationManager _navigator
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<LegendEditorModal @ref="_editorModal" />

@if (_legends.Count > 0)
{
    <div id="legends">
        <Virtualize Items="_legends" Context="legend">
            <div class="legend-item" @onclick="() => _editorModal!.OpenModal(legend)">
                <Card Color="CardColor.Dark">
                    <CardBody>
                        <CardTitle>@legend.Title</CardTitle>
                        <CardSubTitle>@legend.Type</CardSubTitle>
                        <CardText>@legend.Description</CardText>
                    </CardBody>
                </Card>
            </div>
        </Virtualize>
    </div>
}
else
{
    <span style="color: white;">Nenhuma lenda publicada ainda.</span>
}

@code
{
    private List<Legend> _legends = [];
    private LegendEditorModal? _editorModal;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var isSuccess = await _jS.InvokeAsync<bool>("checkAuth");
            if (!isSuccess)
                _navigator.NavigateTo("login");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _legends = await _jS.InvokeAsync<List<Legend>>("getMyLegends");
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            return;
        }
    }
}